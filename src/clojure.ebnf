(* file  := < junk > ( sexpr < junk > ) * *)

sexpr := "(" < junk > ( expr < junk > ) * ")"

junk := ( whitespace | comment ) *

whitespace := #"\s"*

comment := #";[^\n\r\f]*\n\r?"

expr := metaExpr | derefExpr | quoteExpr | rawExpr

metaExpr := meta rawExpr

derefExpr := "@" rawExpr

quoteExpr := "'" rawExpr

rawExpr :=
	  sexpr
     	| symbol
     	| keyword
     	| token
     	| string
     	| number
     	| vector
     	| map
     	| character
     	| dispatch
	| expr

meta := "^" (symbol | keyword | map)

symbol := word ( "/" word )?

keyword := ":" symbol

word := #"[^\s\d][^/\s]*(/[^/\s\d][^\s]*)?"

token := nilExpr | nanExpr | infExpr | boolExpr

nilExpr := "nil"

nanExpr := ("+" | "-")? "NaN"  (* Extension to the Clojure reference grammar *)

infExpr := ("+" | "-")? "Infinity" (* Extension to the Clojure reference grammar *)

boolExpr := "true" | "false"

string := "\"" ( unicodeChar | escape | char )* "\""

escape := "\\" ( quoteEscape | tabEscape | retEscape | newlineEscape | slashEscape | breakEscape | feedEscape )

quoteEscape := "\""

tabEscape := "t"

retEscape := "r"

newlineEscape := "n"

slashEscape := "\\"

breakEscape := "b"

feedEscape := "f"

char := #"[^\"]"

number := floatNum | basedNum | bigNum | ratioNum | intNum

floatNum := #"[+-]?[0-9]+\.[0-9]+"

basedNum := #"[1-9][0-9]*r[0-9]+"

bigNum := #"[+-]?[1-9][0-9]*M"

ratioNum := intNum "/" intNum

intNum := #"[+-]?[1-9][0-9]*"

vector := "[" < junk > (rawExpr < junk >)* "]"

map := "{" < junk > (mapPair < junk >)* "}"

mapPair := rawExpr < junk > rawExpr

character := "\\" (namedChar | unicodeChar | char)

namedChar := returnChar | tabChar | newlineChar | spaceChar | backspaceChar

returnChar := "return"

tabChar := "tab"

newlineChar := "newline"

spaceChar := "space"

backspaceChar := "backspace"

unicodeChar := uChar | oChar

uChar := "u" #"[0-9A-F]{4}"

oChar := "o" #"[0-8]{1,8}"

dispatch := "#" ( set
	        | function
                | pattern
                | recordTypeOrClass
                | record
                | readerExpr )

set := "{" < junk > ( rawExpr < junk > ) * "}"

function := "(" < junk > ( rawExpr < junk > ) * ")"

pattern := string

recordTypeOrClass := symbol vector

record := symbol map

readerExpr := symbol < whitespace > vector
